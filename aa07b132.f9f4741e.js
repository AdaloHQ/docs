(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,b=d["".concat(i,".").concat(m)]||d[m]||l[m]||r;return n?a.a.createElement(b,c(c({ref:t},p),{},{components:n})):a.a.createElement(b,c({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var o=n(2),a=n(6),r=(n(0),n(116)),i={id:"exporting-data",title:"Exporting Data"},c={unversionedId:"component-standards/interactions/exporting-data",id:"component-standards/interactions/exporting-data",isDocsHomePage:!1,title:"Exporting Data",description:"There are 3 main ways to export data from your component to the rest of the Adalo ecosystem. These are component data, action arguments, and autosaveInput. When exporting data from your component, you should use the method that makes the most sense for your use case.",source:"@site/docs/component-standards/interactions/exporting-data.md",permalink:"/component-standards/interactions/exporting-data",lastUpdatedAt:1684763442,sidebar:"Component Standards",previous:{title:"List Controls",permalink:"/component-standards/interactions/list-controls"},next:{title:"General Guidelines",permalink:"/component-standards/code/general-guidelines"}},s=[{value:"Autosave Input",id:"autosave-input",children:[]},{value:"Component Data",id:"component-data",children:[]},{value:"Action Arguments",id:"action-arguments",children:[]}],p={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There are 3 main ways to export data from your component to the rest of the Adalo ecosystem. These are ",Object(r.b)("inlineCode",{parentName:"p"},"component data"),", ",Object(r.b)("inlineCode",{parentName:"p"},"action arguments"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"autosaveInput"),". When exporting data from your component, you should use the method that makes the most sense for your use case."),Object(r.b)("h2",{id:"autosave-input"},"Autosave Input"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"autosaveInput")," role allows your component to directly modify values in the database."),Object(r.b)("p",null,"For more info on ",Object(r.b)("inlineCode",{parentName:"p"},"autosaveInput"),", see ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/interactions/modifying-database-values"}),"Modifying Values in the Database"),"."),Object(r.b)("h2",{id:"component-data"},"Component Data"),Object(r.b)("p",null,"Component data allows props from your component to be accessed via magic text in other components, as well as your own. This should be considered the default method for exporting data and should be used any whenever you don't need to directly modify a database value."),Object(r.b)("p",null,"For more info on component data, see the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/interactions/component-data"}),"Component Data")," docs."),Object(r.b)("h2",{id:"action-arguments"},"Action Arguments"),Object(r.b)("p",null,"Action arguments are very similar to component data. They allow you to use information from your component within an action ",Object(r.b)("strong",{parentName:"p"},"in your component only"),". This is useful if you want to use information from your component in an action, but don't want to share that information across the entire Adalo ecosystem."),Object(r.b)("p",null,"For more info on action arguments, see the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/interactions/actions"}),"Actions")," docs."))}u.isMDXComponent=!0}}]);